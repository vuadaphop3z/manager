@using Manager.WebApp.Settings
@model Manager.WebApp.Models.ShopEditModel

@{
    ViewBag.Title = "Sửa thông tin cửa hàng";
    var currentController = "shop";
}

@Html.Partial("_Notifications")

<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog" style="min-width:50%; height: auto;max-height: 100%;margin: 0 auto;">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

<fieldset>
    <legend>Thông tin cơ bản</legend>
    @using (Html.BeginForm("edit", currentController, FormMethod.Post, new { role = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.Name)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.Code)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Code, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.Phone)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.ProviderId)
                    <select name="@Html.NameFor(m => m.ProviderId)" class="form-control selectpicker" data-live-search="true">
                        <option value="0">Chọn nhà cung cấp</option>
                        @if (Model.Providers != null && Model.Providers.Count > 0)
                        {
                            foreach (var item in Model.Providers)
                            {
                                var chkItem = item.Id;
                                var chkStr = string.Empty;
                                if (chkItem == Model.ProviderId)
                                {
                                    chkStr = "selected";
                                }
                                <option value="@chkItem" @chkStr>@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <select name="@Html.NameFor(m => m.AreaId)" id="@Html.IdFor(m=>m.AreaId)" class="form-control selectpicker" data-live-search="true">
                        <option value="0">Chọn khu vực</option>
                        @if (Model.Areas != null && Model.Areas.Count > 0)
                        {
                            foreach (var item in Model.Areas)
                            {
                                var chkItem = item.Id;
                                var chkStr = string.Empty;
                                if (chkItem == Model.AreaId)
                                {
                                    chkStr = "selected";
                                }
                                <option value="@chkItem" @chkStr>@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group">
                    <select name="@Html.NameFor(m => m.CountryId)" id="@Html.IdFor(m=>m.CountryId)" class="form-control selectpicker" data-live-search="true">
                        <option value="0">Chọn nước</option>
                        @if (Model.Countries != null && Model.Countries.Count > 0)
                        {
                            foreach (var item in Model.Countries)
                            {
                                var chkItem = item.Id;
                                var chkStr = string.Empty;
                                if (chkItem == Model.CountryId)
                                {
                                    chkStr = "selected";
                                }
                                <option value="@chkItem" @chkStr>@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group">
                    <select name="@Html.NameFor(m => m.ProvinceId)" id="@Html.IdFor(m=>m.ProvinceId)" class="form-control selectpicker" data-live-search="true">
                        <option value="0">Chọn tỉnh/thành phố</option>
                        @if (Model.Provinces != null && Model.Provinces.Count > 0)
                        {
                            foreach (var item in Model.Provinces)
                            {
                                var chkItem = item.Id;
                                var chkStr = string.Empty;
                                if (chkItem == Model.ProvinceId)
                                {
                                    chkStr = "selected";
                                }
                                <option value="@chkItem" @chkStr>@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group">
                    <select name="@Html.NameFor(m => m.DistrictId)" id="@Html.IdFor(m=>m.DistrictId)" class="form-control selectpicker" data-live-search="true">
                        <option value="0">Chọn quận/huyện</option>
                        @if (Model.Provinces != null && Model.Districts.Count > 0)
                        {
                            foreach (var item in Model.Districts)
                            {
                                var chkItem = item.Id;
                                var chkStr = string.Empty;
                                if (chkItem == Model.DistrictId)
                                {
                                    chkStr = "selected";
                                }
                                <option value="@chkItem" @chkStr>@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.Address)
                    <div class="form-group">
                        @Html.TextAreaFor(m => m.Address, new { @class = "form-control", rows = "4", style = "resize:none;" })
                        @Html.ValidationMessageFor(model => model.Address)
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.ContactInfo)
                    <div class="form-group">
                        @Html.TextAreaFor(m => m.ContactInfo, new { @class = "form-control", rows = "4", style = "resize:none;" })
                        @Html.ValidationMessageFor(model => model.ContactInfo)
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.Description)
                    <div class="form-group">
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = "4", style = "resize:none;" })
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.RatingType)
                    <div class="form-group">
                        <select name="@Html.NameFor(m => m.RatingType)" id="@Html.IdFor(m => m.RatingType)" class="form-control btn-white">
                            @for (int i = 5; i >= 1; i--)
                            {
                                <option value="@i" @((Model.RatingType == i) ? "selected" : "")>@i sao</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.Openned)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Openned, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.NumberOfRooms)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.NumberOfRooms, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.PostCode)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.PostCode, new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.CheckBoxFor(m => m.IsInternal)
                    <span class="lbl"> @Html.LabelFor(m => m.IsInternal)</span>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.Status)
                    <div class="form-group">
                        <select name="@Html.NameFor(m => m.Status)" id="@Html.IdFor(m => m.Status)" class="form-control btn-white">
                            @foreach (var item in Enum.GetValues(typeof(EnumStatus)))
                            {
                                var chkItem = (int)item;
                                var chkStr = string.Empty;
                                if (chkItem == Model.Status)
                                {
                                    chkStr = "selected";
                                }
                                <option value="@chkItem" @chkStr>@EnumExtensions.GetEnumDescription((Enum)item)</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <label style="color: transparent;">_</label>
                <div>
                    <a class="btn btn-danger btn-sm" href="/@currentController"><i class="ace-icon fa fa-arrow-left"></i> Quay lại</a>
                    <button type="submit" class="btn btn-sm btn-primary"><i class="ace-icon fa fa-floppy-o bigger-110"></i> Lưu</button>
                </div>
            </div>
        </div>
    }
</fieldset>

<br />
<fieldset>
    <legend>Thuộc tính</legend>
    @RenderEditDetailForm()
</fieldset>

@helper RenderEditDetailForm()
    {
        <div class="row">
            <div class="col-md-12 col-xs-12 col-xs-12">
                <div class="tabbable">
                    <ul class="nav nav-tabs" id="myTab3">
                        <li class="active">
                            <a data-toggle="tab" href="#Map">
                                <i class="ace-icon fa fa-map"></i>
                                Bản đồ
                            </a>
                        </li>
                        <li>
                            <a data-toggle="tab" href="#ShopImages">
                                <i class="pink ace-icon fa fa-picture-o bigger-110"></i>
                                Ảnh
                            </a>
                        </li>
                        <li>
                            <a data-toggle="tab" href="#Properties">
                                <i class="blue ace-icon fa fa-check-square-o bigger-110"></i>
                                Tiện nghi
                            </a>
                        </li>
                        <li>
                            <a data-toggle="tab" href="#NearPlaces">
                                <i class="blue ace-icon fa fa-building bigger-110"></i>
                                Địa điểm gần
                            </a>
                        </li>

                        <li>
                            <a data-toggle="tab" href="#Policies">
                                <i class="blue ace-icon fa fa-file-powerpoint-o bigger-110"></i>
                                Chính sách
                            </a>
                        </li>

                        <li>
                            <a data-toggle="tab" href="#Payments">
                                <i class="blue ace-icon fa fa-dollar bigger-110"></i>
                                Thanh toán
                            </a>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div id="Map" class="tab-pane in active">

                            @Html.Partial("Partials/_ShopMap", Model)

                        </div>

                        <div id="ShopImages" class="tab-pane property-content">
                            <div class="row">
                                <div class="col-md-12 col-xs-12">
                                    <ul class="ace-thumbnails clearfix" id="UploadedImages">
                                        @Html.Partial("Partials/_UploadedImages", Model.Images)
                                    </ul>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-12 col-xs-12">
                                    <form action="/upload-handling-script" class="dropzone" style="border:unset !important;">
                                        <div class="fallback">
                                            <input name="files" type="file" multiple />
                                        </div>

                                        <div id="actions" class="row">
                                            <div class="col-lg-7">
                                                <!-- The fileinput-button span is used to style the file input field as button -->
                                                <span class="btn btn-success fileinput-button btn-xs">
                                                    <i class="glyphicon glyphicon-plus"></i>
                                                    <span>Add files...</span>
                                                </span>
                                                <button type="button" class="btn btn-primary start btn-xs">
                                                    <i class="glyphicon glyphicon-upload"></i>
                                                    <span>Start upload</span>
                                                </button>
                                                <button type="button" class="btn btn-primary btn-xs" onclick="RefreshImageList();">
                                                    <i class="glyphicon glyphicon-refresh"></i>
                                                    <span>Refresh</span>
                                                </button>
                                                <button type="reset" class="btn btn-warning cancel btn-xs">
                                                    <i class="glyphicon glyphicon-ban-circle"></i>
                                                    <span>Cancel upload</span>
                                                </button>
                                            </div>

                                            <div class="col-lg-5">
                                                <!-- The global file processing state -->
                                                <div class="fileupload-process">
                                                    <div id="total-progress" class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                        <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress></div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <hr style="margin-top:5px !important;" />

                                        <div class="row">
                                            <div class="col-md-12 col-xs-12">
                                                <div class="table table-striped files" id="previews">

                                                    <div id="template" class="file-row">
                                                        <!-- This is used as the file preview template -->
                                                        <div>
                                                            <span class="preview"><img data-dz-thumbnail /></span>
                                                        </div>
                                                        <div>
                                                            <p class="name" data-dz-name></p>
                                                            <strong class="error text-danger" data-dz-errormessage></strong>
                                                        </div>
                                                        <div>
                                                            <p class="size" data-dz-size></p>
                                                            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                                <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress></div>
                                                            </div>
                                                        </div>
                                                        <div>
                                                            <button class="btn btn-primary start btn-xs" type="button">
                                                                <i class="glyphicon glyphicon-upload"></i>
                                                                <span>Start</span>
                                                            </button>
                                                            <button data-dz-remove class="btn btn-warning cancel btn-xs" type="button">
                                                                <i class="glyphicon glyphicon-ban-circle"></i>
                                                                <span>Cancel</span>
                                                            </button>
                                                            @*<button data-dz-remove class="btn btn-danger delete btn-xs" type="button">
                                                                <i class="glyphicon glyphicon-trash"></i>
                                                                <span>Delete</span>
                                                                </button>*@
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>

                                    </form>
                                </div>
                            </div>
                        </div>

                        <div id="Properties" class="tab-pane property-content">
                            <div class="row">
                                <div class="col-md-12 col-xs-12">
                                    @Html.Partial("Partials/_Properties", Model.MetaData)
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 col-xs-12">
                                    <button type="button" class="btn btn-sm btn-primary" id="btnSaveProperty"><i class="ace-icon fa fa-floppy-o bigger-110"></i> Lưu</button>
                                </div>
                            </div>
                        </div>

                        <div id="NearPlaces" class="tab-pane property-content">
                            @if (Model.MetaData != null)
                            {
                                <div class="row">
                                    <div class="col-md-12 col-xs-12">
                                        <div class="widget-box transparent">
                                            <div class="widget-header widget-header-small">
                                                <h4 class="widget-title blue smaller">
                                                    <i class="ace-icon fa fa-building orange"></i>
                                                    Các địa điểm gần cửa hàng
                                                </h4>
                                                <div class="widget-toolbar pull-right" style="padding:0px;">
                                                    <button id="btnAddPlace" class="btn btn-xs btn-white" data-target="#myModal" data-toggle="modal"><i class="ace-icon fa fa-plus bigger-110"></i> Thêm địa điểm</button>
                                                </div>
                                            </div>

                                            <div class="widget-body">
                                                <div class="widget-main" style="padding: 10px 0px 10px 0px">
                                                    <div class="profile-feed" id="NearPlacesItems">
                                                        @if (!string.IsNullOrEmpty(Model.MetaData.NearPlaces))
                                                        {
                                                            @Html.Partial("Partials/_NearPlaces", Model.MetaData.NearPlaces)
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div id="Policies" class="tab-pane property-content">
                            <div class="row">
                                <div class="col-md-12 col-xs-12">
                                    @Html.Partial("Partials/_Policies", Model)
                                </div>
                            </div>                            
                        </div>

                        <div id="Payments" class="tab-pane">
                            <div class="row" style="min-height:200px; overflow:auto;">
                                <div class="col-md-12 col-xs-12">
                                    @Html.Partial("Partials/_Payments", Model.MetaData)
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 col-xs-12">
                                    <button type="button" class="btn btn-sm btn-primary" id="btnSavePayment"><i class="ace-icon fa fa-floppy-o bigger-110"></i> Lưu</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div><!-- /.col -->

        </div>
}


@section PagePluginStyles{
    <link href="~/assets/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/Scripts/Plugins/Gmaps/css/jquery-gmaps-latlon-picker.css" rel="stylesheet" />
}

@section PageInlineStyles{
    <style>
        
    </style>
}

@section PagePluginScripts{
    <!--validate-->
    <script src="~/Scripts/jquery.validate.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js" type="text/javascript"></script>
    <script src="~/assets/js/bootstrap-select.min.js"></script>
    <script src="~/Scripts/bootbox.min.js"></script>
    <script src="~/Scripts/Plugins/Dropzone/dropzone.js"></script>

    <!-- page specific plugin scripts -->
    <script src="~/assets/js/jquery.colorbox.min.js"></script>

    <script type="text/javascript" src='https://maps.google.com/maps/api/js?sensor=false&libraries=places&key=AIzaSyBJrPvacZrbT2gjsttANOlGxwf-DejUnrU'></script>
    <script src="~/Scripts/Plugins/Gmaps/js/locationpicker.jquery.min.js"></script>
}
@section PageInlineScripts{
    <script>
        $('#us3').locationpicker({
            location: {
                latitude: @Model.Latitude,
                longitude: @Model.Longitude
            },
            radius: 300,
            zoom: @MapSettings.DefaultZoomSize,
            inputBinding: {
                latitudeInput: $('#Latitude'),
                longitudeInput: $('#Longitude'),
                radiusInput: $('#us3-radius'),
                locationNameInput: $('#us3-address')
            },
            enableAutocomplete: true,
            onchanged: function (currentLocation, radius, isMarkerDropped) {
                // Uncomment line below to show alert on each Location Changed event
                //alert("Location changed. New location (" + currentLocation.latitude + ", " + currentLocation.longitude + ")");
            }
        });
    </script>

    <script type="text/javascript">
        function ImageViewEvents() {
            var $overflow = '';
            var colorbox_params = {
                rel: 'colorbox',
                reposition: true,
                scalePhotos: true,
                scrolling: false,
                previous: '<i class="ace-icon fa fa-arrow-left"></i>',
                next: '<i class="ace-icon fa fa-arrow-right"></i>',
                close: '&times;',
                current: '{current} of {total}',
                maxWidth: '100%',
                maxHeight: '100%',
                onOpen: function () {
                    $overflow = document.body.style.overflow;
                    document.body.style.overflow = 'hidden';
                },
                onClosed: function () {
                    document.body.style.overflow = $overflow;
                },
                onComplete: function () {
                    $.colorbox.resize();
                }
            };

            $('.ace-thumbnails [data-rel="colorbox"]').colorbox(colorbox_params);
            $("#cboxLoadingGraphic").html("<i class='ace-icon fa fa-spinner orange fa-spin'></i>");//let's add a custom loading icon


            $(document).one('ajaxloadstart.page', function (e) {
                $('#colorbox, #cboxOverlay').remove();
            });
        }

        jQuery(function ($) {
            ImageViewEvents();
        })
    </script>

    <script>
        function RegisterMapPopup() {
            $('#us3Popup').locationpicker({
                location: {
                    latitude: 21.0297473,
                    longitude: 105.8103271
                },
                radius: 300,
                zoom: @MapSettings.DefaultZoomSize,
                inputBinding: {
                    latitudeInput: $('#LatitudePopup'),
                    longitudeInput: $('#LongitudePopup'),
                    radiusInput: $('#us3-radiusPopup'),
                    locationNameInput: $('#us3-addressPopup')
                },
                enableAutocomplete: true,
            });

            $('#myModal').on('shown.bs.modal', function () {
                $('#us3Popup').locationpicker('autosize');
            });
        }

        function AddPolicy(btn) {
            var currentCtrl = $(btn);
             $.get("/Shop/AddPolicy", { shopId: @Model.Id,policyId: currentCtrl.data("id"), policyCode : currentCtrl.data("code") })
                    .done(function (data) {
                        $('#myModal').modal('show');
                        $('#myModalContent').html(data);

                        return false;
                    });
        }

        function EditPolicy(btn) {
            var currentCtrl = $(btn);
            $.get("/Shop/EditPolicy", { shopId: @Model.Id,policyId: currentCtrl.data("id"), policyCode : currentCtrl.data("code") })
                .done(function (data) {
                    $('#myModal').modal('show');
                    $('#myModalContent').html(data.html);

                    return false;
                });
        }

        function AddExtraBed(btn) {
            var currentCtrl = $(btn);
            $.get("/Shop/AddExtraBed", { shopId: @Model.Id,policyId: currentCtrl.data("id"), policyCode : currentCtrl.data("code") })
                .done(function (data) {
                    $('#myModal').modal('show');
                    $('#myModalContent').html(data);

                    return false;
                });
        }

        function DeleteChildPolicy(btn) {
            var currentCtrl = $(btn);
            bootbox.confirm({
                    message: "Bạn có chắc chắn muốn xóa?",
                    buttons: confirmButtons,
                    callback: function (confirmed) {
                        if (confirmed) {
                            $.get("/Shop/DeleteChildPolicy", { shopId: @Model.Id,id: currentCtrl.data("id"), policyId: currentCtrl.data("policyid"), policyCode : currentCtrl.data("code") })
                                .done(function (data) {
                                    $("#Policy_" + currentCtrl.data("policyid")).html(data.html);
                                    return false;
                                });
                        }
                    }
                });
        }

        function DeleteDinningPolicy(btn) {
            var currentCtrl = $(btn);
            bootbox.confirm({
                message: "Bạn có chắc chắn muốn xóa?",
                buttons: confirmButtons,
                callback: function (confirmed) {
                    if (confirmed) {
                        $.get("/Shop/DeleteDinningPolicy", { shopId: @Model.Id,id: currentCtrl.data("id"), policyId: currentCtrl.data("policyid"), policyCode : currentCtrl.data("code") })
                            .done(function (data) {
                                $("#Policy_" + currentCtrl.data("policyid")).html(data.html);

                                //RegisterPolicyEvents();
                                return false;
                            });
                    }
                }
            });
        }

        function RegisterPolicyEvents() {

        }

        $(document).ready(function () {
            $('.selectpicker').selectpicker({
                style: "btn-white"
            });

            $("#@Html.IdFor(m=>m.AreaId)").change(function () {
                AreaChangeEvent();
            });

            $("#@Html.IdFor(m=>m.CountryId)").change(function () {
                CountryChange();
            });

            $("#@Html.IdFor(m=>m.ProvinceId)").change(function () {
                ProvinceChange();
            });

            $("#btnSaveProperty").click(function () {
                SaveProperty();
            });

            $("#btnSaveMap").click(function () {
                UpdateMap();
            });

            $("#btnAddPlace").click(function (ev) {
                ev.preventDefault();

                $.get("/Shop/AddPlace", { shopId: @Model.Id })
                    .done(function (data) {
                        $('#myModal').modal('show');
                        $('#myModalContent').html(data);

                        RegisterMapPopup();

                        $('.iconpicker').selectpicker({
                            style: "btn-white iconpicker",
                        });

                        return false;
                    });
            });

            $("#btnSavePayment").click(function () {
                SavePayment();
            });
        });

        function RemovePlace(btn) {
            var currentControl = $(btn);
            $.post("/Shop/RemovePlace", { Id: currentControl.data("id"), shopId: @Model.Id  })
                .done(function (data) {
                    if (data) {
                        if (data.success) {
                            currentControl.parents().closest(".place-item").remove();

                            //bootbox.alert(data.message);
                        } else {
                            bootbox.alert(data.errorMessage);
                        }
                    }
            });
        }

        function AreaChangeEvent() {
            var changeElement = $("#@Html.IdFor(m=>m.CountryId)");
            changeElement.html("");
            changeElement.selectpicker('refresh');

            $("#@Html.IdFor(m=>m.ProvinceId)").find("option").not(':first').remove();
            $("#@Html.IdFor(m=>m.ProvinceId)").selectpicker('refresh');

            $("#@Html.IdFor(m=>m.DistrictId)").find("option").not(':first').remove();
            $("#@Html.IdFor(m=>m.DistrictId)").selectpicker('refresh');

            $.ajax({
                url: '/Area/GetCountryByArea',
                data: { areaId: $("#@Html.IdFor(m=>m.AreaId)").val() },
                success: function (result) {
                    if (result) {
                        if (result.data) {
                            changeElement.html(result.data).selectpicker('refresh');
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var responseTitle = "Error encountered"
                    $.showErrorMessage('Error message', $(responseTitle).text() + "\n" + formatErrorMessage(jqXHR, errorThrown), function () { });
                }
            });
        }

        function CountryChange() {
            var changeElement = $("#@Html.IdFor(m=>m.ProvinceId)");
            changeElement.html("");
            changeElement.selectpicker('refresh');

           $("#@Html.IdFor(m=>m.DistrictId)").find("option").not(':first').remove();
           $("#@Html.IdFor(m=>m.DistrictId)").selectpicker('refresh');

            $.ajax({
                url: '/Area/GetProvinceByCountry',
                data: { countryId: $("#@Html.IdFor(m=>m.CountryId)").val() },
                success: function (result) {
                    if (result) {
                        if (result.data) {
                            changeElement.html(result.data).selectpicker('refresh');
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var responseTitle = "Error encountered"
                    $.showErrorMessage('Error message', $(responseTitle).text() + "\n" + formatErrorMessage(jqXHR, errorThrown), function () { });
                }
            });
        }

        function ProvinceChange() {
            var changeElement = $("#@Html.IdFor(m=>m.DistrictId)");
            changeElement.html("");

            $.ajax({
                url: '/Area/GetDistrictByProvince',
                data: { provinceId: $("#@Html.IdFor(m=>m.ProvinceId)").val() },
                success: function (result) {
                    if (result) {
                        if (result.data) {
                            changeElement.html(result.data).selectpicker('refresh');
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var responseTitle = "Error encountered"
                    $.showErrorMessage('Error message', $(responseTitle).text() + "\n" + formatErrorMessage(jqXHR, errorThrown), function () { });
                }
            });
        }

        function RemoveImage(btn) {
            var currentControl = $(btn);
            $.post("/Shop/RemoveImage", { Id: currentControl.data("id"), Url: currentControl.data("url")  })
                .done(function (data) {
                    if (data) {
                        if (data.success) {
                            currentControl.closest("li").remove();
                        } else {
                            bootbox.alert(data.errorMessage);
                        }
                    }
            });
        }

        function RefreshImageList() {
            $.post("/Shop/RefreshImageList", { Id: @Model.Id })
                .done(function (data) {
                    if (data) {
                        if (data.success) {
                            $("#UploadedImages").html(data.html);
                            ImageViewEvents();
                        } else {
                            bootbox.alert(data.errorMessage);
                        }
                    }
                });
        }

        function SaveProperty() {
            var selectedValues = [];
            $('#Properties input:checked').each(function () {
                selectedValues.push($(this).val());
            });

            $.post("/Shop/SaveProperty", { Id: @Model.Id, selectedValues: selectedValues.join(",") })
                .done(function (data) {
                    if (data) {
                        if (data.success) {
                            bootbox.alert(data.message);
                        } else {
                            bootbox.alert(data.errorMessage);
                        }
                    }
                });
        }

        function UpdateMap() {
            var latitude = $("#Latitude").val();
            var longitude = $("#Longitude").val();

            $.post("/Shop/UpdateMap", { shopId: @Model.Id, latitude: latitude, longitude: longitude })
                .done(function (data) {
                    if (data) {
                        if (data.success) {
                            bootbox.alert(data.message);
                        } else {
                            bootbox.alert(data.errorMessage);
                        }
                    }
                });
        }

        function SavePayment() {
            var selectedValues = [];
            $('#Payments input:checked').each(function () {
                selectedValues.push($(this).val());
            });

            $.post("/Shop/SavePayment", { Id: @Model.Id, selectedValues: selectedValues.join(",") })
                .done(function (data) {
                    if (data) {
                        if (data.success) {
                            bootbox.alert(data.message);
                        } else {
                            bootbox.alert(data.errorMessage);
                        }
                    }
                });
        }
    </script>

    <script>
      Dropzone.autoDiscover = false;

      // Get the template HTML and remove it from the doument
      var previewNode = document.querySelector("#template");
      previewNode.id = "";
      var previewTemplate = previewNode.parentNode.innerHTML;
      previewNode.parentNode.removeChild(previewNode);

      var myDropzone = new Dropzone(document.body, { // Make the whole body a dropzone
        url: "/Shop/Upload", // Set the url
        thumbnailWidth: 80,
        thumbnailHeight: 80,
        parallelUploads: 20,
        previewTemplate: previewTemplate,
        autoQueue: false, // Make sure the files aren't queued until manually added
        previewsContainer: "#previews", // Define the container to display the previews
        clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.
        init: function () {
            this.on("sending", function (file, xhr, formData) {
                //append more data here
                formData.append("Id", "@Model.Id");
            });

            this.on("success", function (file, responseText) {
                if (responseText) {
                    if (!responseText.success) {
                        bootbox.alert(responseText.errorMessage);                       
                    }
                }
            });
        }
      });

      myDropzone.on("addedfile", function(file) {
        // Hookup the start button
        file.previewElement.querySelector(".start").onclick = function() { myDropzone.enqueueFile(file); };
      });

      // Update the total progress bar
      myDropzone.on("totaluploadprogress", function(progress) {
        document.querySelector("#total-progress .progress-bar").style.width = progress + "%";
      });

      myDropzone.on("sending", function(file) {
        // Show the total progress bar when upload starts
        document.querySelector("#total-progress").style.opacity = "1";
        // And disable the start button
        file.previewElement.querySelector(".start").setAttribute("disabled", "disabled");
      });

      // Hide the total progress bar when nothing's uploading anymore
      myDropzone.on("queuecomplete", function(progress) {
        document.querySelector("#total-progress").style.opacity = "0";
      });

      // Setup the buttons for all transfers
      // The "add files" button doesn't need to be setup because the config
      // `clickable` has already been specified.
      document.querySelector("#actions .start").onclick = function() {
        myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));
      };
      document.querySelector("#actions .cancel").onclick = function() {
        myDropzone.removeAllFiles(true);
      };
    </script>
}